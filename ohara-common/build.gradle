/*
 * Copyright 2019 is-land
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: "$rootDir/gradle/dependencies.gradle"

apply plugin: 'com.novoda.bintray-release'

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.novoda:bintray-release:0.9'
  }
}

dependencies {
  implementation libs.commonsNet
  implementation libs.commonsLang
  implementation libs.slf4jApi
  implementation libs.slf4jlog4j
  implementation libs.commonsIo
  testImplementation libs.mockito
  testImplementation libs.junit
}

def exec(String[] args) {
  def stdout = new ByteArrayOutputStream()
  exec {
    commandLine args
    standardOutput = stdout
  }
  // If the shell is wrapped by cygwin, the line separator is changed to \n...
  // Hence, checking the separator manually is more suitable in this case
  def s = stdout.toString()
  if (s.contains("\r\n")) return s.replaceAll("\r\n", "")
  return s.replaceAll("\n", "")
}

import org.apache.tools.ant.taskdefs.condition.Os
def whoami() {
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    def fullName = exec("whoami")
    def backslash = fullName.lastIndexOf("\\")
    if (backslash == -1) return fullName
    else fullName.substring(backslash + 1)
  }
  else return exec("whoami")
}
def user() {
  try {
    return exec("git", "config", "user.name")
  } catch (Throwable ignored) {
    // if git's user is not set, git will return exit code 1
    return whoami()
  }
}

def revision() {
  try {
    return exec("git", "log", "-1", "--pretty=format:%H")
  } catch (Throwable ignored) {
    // if git's user is not set, git will return exit code 1
    return "Unknown"
  }
}

def date() {
  return new Date().format('yyyy-MM-dd HH:mm:ss')
}

task initializer {
  doLast {
    def file = new File("$projectDir" + "/src/main/java/com/island/ohara/common/util/VersionUtil.java")
    if (file.exists()) file.delete()
    def writer = new FileWriter(file)
    try {
      def code = """package com.island.ohara.common.util;
// DON'T touch this file!!! It is generated dynamically. see ohara-common/build.gradle
public final class VersionUtil {
  public static final String VERSION = \"${project.version}\";
  public static final String USER = \"${user()}\";
  public static final String REVISION = \"${revision()}\";
  public static final String DATE = \"${date()}\";

  public static void main(String[] args) {
    System.out.println(\"ohara \" + VERSION);
    System.out.println(\"revision=\" + REVISION);
    System.out.println(\"Compiled by \" + USER + \" on \" + DATE);
  }

  private VersionUtil() {}
}
"""
      writer.write(code.replaceAll("\n", System.lineSeparator()))
    } finally {
      writer.close()
    }
  }
}

/**
 * Generating VersionUtil must run before compileJava.
 */
tasks.matching { it.name != 'initializer' && it.name == "compileJava"}.all { Task task ->
  task.dependsOn initializer
}

publish {
  userOrg = property("userOrg")
  repoName = property("repoName")
  groupId = property("group")
  artifactId = 'ohara-common'
  publishVersion = project.version
  desc = property("desc")
  website = property("website")
}