/*
 * Copyright 2019 is-land
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: "$rootDir/gradle/dependencies.gradle"

apply plugin: 'com.novoda.bintray-release'
buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.novoda:bintray-release:0.9'
  }
}

// We include the simple streamApp client application for IT test
testJar {
  include '**/SimpleApplicationForOharaEnv.class'
}

dependencies {
  implementation project(':ohara-common')
  implementation project(':ohara-kafka')
  implementation libs.commonsLang
  implementation libs.slf4jApi
  implementation libs.slf4jlog4j
  implementation libs.kafkaStream
  implementation libs.commonsIo
  testImplementation project(':ohara-testing-util')
  testImplementation project(":ohara-testing-util").sourceSets.test.output
  testImplementation project(":ohara-common").sourceSets.test.output
  testImplementation libs.mockito
  testImplementation libs.junit
  testImplementation libs.javassist
}

/**
 * run a importData based on user defined kafka cluster
 */
task runImportData(type: JavaExec, dependsOn: 'classes') {
  description 'run AirlineDataImporter. You can use --bootstrapServers and --useOharaAPI.'
  String servers = "192.168.99.100:9092,192.168.99.100:9093,192.168.99.100:9094"
  if (project.hasProperty('servers')) {
    servers = "${project.getProperty('servers')}"
  }
  boolean useOharaAPI = false

  classpath = sourceSets.test.runtimeClasspath
  main = "com.island.ohara.streams.AirlineDataImporter"

  args = Arrays.asList("--bootstrapServers", servers, "--useOharaAPI", useOharaAPI)

}

publish {
  userOrg = property("userOrg")
  repoName = property("repoName")
  groupId = property("group")
  artifactId = 'ohara-streams'
  publishVersion = project.version
  desc = property("desc")
  website = property("website")
}
