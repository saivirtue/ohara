/*
 * Copyright 2019 is-land
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: "$rootDir/gradle/dependencies.gradle"

apply plugin: 'com.novoda.bintray-release'

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.novoda:bintray-release:0.9'
  }
}

// TODO: Why we set the time zone in testing??? We can get the system timezone through Calendar.getInstance().getTimeZone... by chia
test.systemProperty("user.timezone", "Asia/Taipei")

dependencies {
  implementation project(':ohara-common')
  implementation project(':ohara-client')
  implementation project(':ohara-kafka')
  implementation libs.scala
  implementation libs.scalaLogging
  implementation libs.slf4jApi
  implementation libs.slf4jlog4j
  implementation libs.sprayJson
  implementation libs.kafkaConnectRuntime
  /**
   * The Hadoop use jersey 1.x, but the Kafka use jersey 2.x so jar conflict
   *
   * Solve running Kafka Connect mini cluster failed. OHARA-103
   */
  implementation(libs.hadoopCommon) {
    exclude group: 'com.sun.jersey', module: 'jersey-core'
    exclude group: 'com.sun.jersey', module: 'jersey-json'
    exclude group: 'com.sun.jersey', module: 'jersey-servlet'
    exclude group: 'com.sun.jersey', module: 'jersey-server'
  }
  implementation(libs.hadoopHDFS) {
    exclude group: 'com.sun.jersey', module: 'jersey-core'
    exclude group: 'com.sun.jersey', module: 'jersey-json'
    exclude group: 'com.sun.jersey', module: 'jersey-servlet'
    exclude group: 'com.sun.jersey', module: 'jersey-server'
  }
  testImplementation project(":ohara-testing-util")
  testImplementation project(":ohara-common").sourceSets.test.output
  testImplementation project(":ohara-testing-util").sourceSets.test.output
  testImplementation libs.scalatest
  testImplementation libs.mockito
  testImplementation libs.junit
}

publish {
  userOrg = property("userOrg")
  repoName = property("repoName")
  groupId = property("group")
  artifactId = 'ohara-connector'
  publishVersion = project.version
  desc = property("desc")
  website = property("website")
}
