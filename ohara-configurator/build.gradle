import java.util.stream.Collectors
import java.util.stream.StreamSupport

/*
 * Copyright 2019 is-land
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: "$rootDir/gradle/dependencies.gradle"

dependencies {
  implementation project(':ohara-agent')
  implementation project(':ohara-client')
  implementation project(':ohara-common')
  implementation project(':ohara-connector')
  implementation project(':ohara-kafka')
  implementation project(":ohara-streams")
  implementation project(":ohara-metrics")
  implementation libs.kafkaClient
  implementation libs.kafkaConnectFile
  implementation libs.kafkaConnectRuntime
  implementation libs.scalaLibrary
  implementation libs.scalaReflect
  implementation libs.scalaLogging
  implementation libs.slf4jApi
  implementation libs.slf4jlog4j
  implementation libs.akkaStream
  implementation libs.sprayJson
  implementation libs.rocksdb
  // some tests demand the connector implementation
  // DON'T import ohara-connecor into implementation scope!
  testImplementation project(':ohara-connector')
  testImplementation project(':ohara-testing-util')
  testImplementation project(":ohara-testing-util").sourceSets.test.output
  testImplementation project(":ohara-common").sourceSets.test.output
  testImplementation libs.scalatest
  testImplementation libs.mockito
  testImplementation libs.junit
}

/**
 * run a configurator based on kafka cluster
 */
task runConfigurator(type: JavaExec, dependsOn: 'classes') {
  description 'run a configurator. You can use -Phost and -Pport to change the address and port of configurator.' +
    'Also, you can assign -Pbrokers, -Pworkers, -Ptopic, -Ppartitions, and -Preplications to run the configurator on truly kafka'

  classpath = sourceSets.main.runtimeClasspath
  main = "com.island.ohara.configurator.Configurator"

  def keywords = [
    "hostname",
    "port",
    "k8s",
    "folder",
    "fake"
  ]
  args = keywords.stream()
    .filter {
      word -> project.hasProperty(word)
    }
    .flatMap {
      word -> Arrays.asList("--$word", project.getProperty(word)).stream()
    }
    .collect(Collectors.toList())
}

/**
 * package only streamApp jar for testing purpose.
 */
task streamAppJar(type: Jar, dependsOn: compileScala) {
  from sourceSets.test.output
  include '**/DefinitionStreamApp**.class'
  archiveName "ohara-definition-streamapp.jar"
}

test.dependsOn streamAppJar

